# This YAML template is designed for capturing information about discovered
# vulnerabilities.

report:
  # Start of the first vulnerability report entry
  - bug:
      type: Null Dereference
      lineno: 76
      class: TP
      description:
        Found with infer. In line 61 "map" is assigned but there is no 
        verification meaning this could be null.
      recommendation: 
        There should be an if to verify this variable
        and, not being null, do the operations.
  # End of the first vulnerability report entry

  # Start of the second vulnerability report entry
  - bug:
      type: Memory Leak
      lineno: 130
      class: TP
      description: 
        Found with infer. The structure "entries" is created and allocated and
        are not freed before the end of the function
      recommendation: 
        Free entries
  # End of the second vulnerability report entry

  # Start of the third vulnerability report entry
  - bug:
      type: Memory Leak
      lineno: 156
      class: TP
      description: 
        Found with infer. Variable "val" is allocated and not freed
      recommendation: 
        Free val
  # End of the third vulnerability report entry

  # Start of the fourth vulnerability report entry
  - bug:
      type: Null Dereference
      lineno: 156
      class: TP
      description: 
        Found with infer. Variable "val" might be null
      recommendation: 
        Verify variable val, after assigning it
  # End of the fourth vulnerability report entry

  # Start of the fifth vulnerability report entry
  - bug:
      type: Nullptr Dereference
      lineno: 163
      class: TP
      description: 
        Found with infer. Function hashmap_new might return null, so 
        variable "map" might be assigned to null
      recommendation: 
        Verify if output is null
  # End of the fifth vulnerability report entry

# Start of the sixth vulnerability report entry
  - bug: 
      type: Null Pointer Dereference
      lineno: 72
      class: TP (FN se considerarmos que so o primeiro comando e que conta)
      description: 
        Found with clang analizer. In function hashmap_new, if allocation of the variable "fields" fails,
        the code is assigning "0" to the variable "size" that is a part of "field" which is a null pointer.
      recommendation: 
        Verify if allocation of variable "field" fails 
  # End of the sixth vulnerability report entry

  # Start of the seventh vulnerability report entry
  - bug:
      type: 
      lineno: 124
      class: FP (FN se considerarmos que so o primeiro comando e que conta)
      description: 
        Result of 'malloc' is converted to a pointer of type 'char',
        which is incompatible with sizeof operand type 'char *'
      recommendation: 
        Let it be, let it live, its fine
  # End of the seventh vulnerability report entry

  # Start of the eighth vulnerability report entry
  - bug:
      type: Memory Leak
      lineno: 170
      class: TP (FN se considerarmos que so o primeiro comando e que conta)
      description: 
        Found with clang analizer. Variable "ret" is allocated and not freed 
        after used
      recommendation: 
        Free variable "ret"
  # End of the eighth vulnerability report entry

  # Start of the ninth vulnerability report entry
  - bug:
      type: Buffer Overflow
      lineno: 125
      class: TP
      description: 
        Call to function 'strcpy' is insecure as it does not provide
        bounding of the memory buffer. 
      recommendation: 
        Replace unbounded copy functions with analogous functions 
        that support length arguments such as 'strlcpy'
  # End of the ninth vulnerability report entry

  # Start of the tenth vulnerability report entry
  - bug:
      type: Null Dereference
      lineno: 72
      class: 
      description: Access to field 'size' results in a dereference of a null pointer (loaded from variable 'field') 
      recommendation: 
  # End of the tenth vulnerability report entry

  # Start of the eleventh vulnerability report entry
  - bug:
      type: Buffer Overflow
      lineno: 120
      class: 
      description: Call to function 'memcpy' is insecure as it does not provide security checks introduced 
        in the C11 standard. Replace with analogous functions that support length arguments or provides 
        boundary checks such as 'memcpy_s' in case of C11
      recommendation: 
  # End of the eleventh vulnerability report entry

  # Start of the twelfth vulnerability report entry
  - bug:
      type: 
      lineno: 132
      class: 
      description:
      recommendation: 
  # End of the twelfth vulnerability report entry